---
title: "Week 1"
format: html
---

## Shiny
I have neglected to take notes on Shiny as I have experience with the application already. 

The main idea behind Shiny is that if you are familiar with R already, Shiny takes away the burden of learning HTML/CSS and makes developing a data product easier for R users. 

Use `?builder` to see built in HTML tags. 

You can open the Shiny app after you run it in the browser and view it's source code with Ctrl + u

### Shiny gadgets  
Formerly manipulate was useful, now with shiny gadgets you can do the same thing. You create a function that opens a small shiny app. More self facing rather than for others.  

At it's core, launches a small single pane Shiy application. 

### A Simple Gadget: Code

```{r}
library(shiny)
library(miniUI)

myFirstGadget <- function() {
  ui <- miniPage(
    gadgetTitleBar("My First Gadget")
  )
  server <- function(input, output, session) {
    # The Done button closes the app
    observeEvent(input$done, {
      stopApp()
    })
  }
  runGadget(ui, server)
}
```

### More complex app  

```{r}
library(shiny)
library(miniUI)

multiplyNumbers <- function(numbers1, numbers2) {
  ui <- miniPage(
    gadgetTitleBar("Multiply Two Numbers"),
    miniContentPanel(
      selectInput("num1", "First Number", choices=numbers1),
      selectInput("num2", "Second Number", choices=numbers2)
    )
  )

  server <- function(input, output, session) {
    observeEvent(input$done, {
      num1 <- as.numeric(input$num1)
      num2 <- as.numeric(input$num2)
      stopApp(num1 * num2)
    })
  }
  runGadget(ui, server)
}
```

### Shiny with interactive plots  

```{r}
library(shiny)
library(miniUI)

pickTrees <- function() {
  ui <- miniPage(
    gadgetTitleBar("Select Points by Dragging your Mouse"),
    miniContentPanel(
      plotOutput("plot", height = "100%", brush = "brush")
    )
  )

  server <- function(input, output, session) {
    output$plot <- renderPlot({
      plot(trees$Girth, trees$Volume, main = "Trees!",
        xlab = "Girth", ylab = "Volume")
    })
    observeEvent(input$done, {
      stopApp(brushedPoints(trees, input$brush,
        xvar = "Girth", yvar = "Volume"))
    })
  }

  runGadget(ui, server)
}
```

## Google Vis  
### Basic idea

* The R function creates an HTML page
* The HTML page calls Google Charts
* The result is an interactive HTML graphic

**Note that this package's plots that require Flash, including the MotionChart below no longer work**

### Example 

```{r gv, results="asis", cache=TRUE}
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
                     options=list(width=600, height=400))
#print(M,"chart")
```



